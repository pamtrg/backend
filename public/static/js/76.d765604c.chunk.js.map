{"version":3,"file":"static/js/76.d765604c.chunk.js","mappings":"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","sources":["app/modules/apps/user-management/users-list/core/_requests.ts","app/modules/apps/user-management/users-list/core/QueryRequestProvider.tsx","app/modules/apps/user-management/users-list/core/QueryResponseProvider.tsx","app/modules/apps/user-management/users-list/core/ListViewProvider.tsx","app/modules/apps/user-management/users-list/components/header/UsersListFilter.tsx","app/modules/apps/user-management/users-list/components/header/UserListToolbar.tsx","app/modules/apps/user-management/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/user-management/users-list/components/header/UsersListSearchComponent.tsx","app/modules/apps/user-management/users-list/components/header/UsersListHeader.tsx","app/modules/apps/user-management/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/user-management/users-list/table/columns/CustomRow.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserLastLoginCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserTwoStepsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserActionsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionHeader.tsx","app/modules/apps/user-management/users-list/table/columns/_columns.tsx","app/modules/apps/user-management/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/user-management/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/user-management/users-list/table/UsersTable.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/user-management/users-list/core/_models.ts","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/user-management/users-list/UsersList.tsx","app/modules/apps/user-management/UsersPage.tsx"],"sourcesContent":["import axios, {AxiosResponse} from 'axios'\nimport {ID, Response} from '../../../../../../_metronic/helpers'\nimport {User, UsersQueryResponse} from './_models'\n\nconst API_URL = process.env.REACT_APP_THEME_API_URL\nconst USER_URL = `${API_URL}/user`\nconst GET_USERS_URL = `${API_URL}/users/query`\n\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\n  return axios\n    .get(`${GET_USERS_URL}?${query}`)\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\n}\n\nconst getUserById = (id: ID): Promise<User | undefined> => {\n  return axios\n    .get(`${USER_URL}/${id}`)\n    .then((response: AxiosResponse<Response<User>>) => response.data)\n    .then((response: Response<User>) => response.data)\n}\n\nconst createUser = (user: User): Promise<User | undefined> => {\n  return axios\n    .put(USER_URL, user)\n    .then((response: AxiosResponse<Response<User>>) => response.data)\n    .then((response: Response<User>) => response.data)\n}\n\nconst updateUser = (user: User): Promise<User | undefined> => {\n  return axios\n    .post(`${USER_URL}/${user.id}`, user)\n    .then((response: AxiosResponse<Response<User>>) => response.data)\n    .then((response: Response<User>) => response.data)\n}\n\nconst deleteUser = (userId: ID): Promise<void> => {\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\n}\n\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\n  return axios.all(requests).then(() => {})\n}\n\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser}\n","import {FC, useState, createContext, useContext} from 'react'\nimport {\n  QueryState,\n  QueryRequestContextProps,\n  initialQueryRequest,\n  WithChildren,\n} from '../../../../../../_metronic/helpers'\n\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\n\nconst QueryRequestProvider: FC<WithChildren> = ({children}) => {\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\n\n  const updateState = (updates: Partial<QueryState>) => {\n    const updatedState = {...state, ...updates} as QueryState\n    setState(updatedState)\n  }\n\n  return (\n    <QueryRequestContext.Provider value={{state, updateState}}>\n      {children}\n    </QueryRequestContext.Provider>\n  )\n}\n\nconst useQueryRequest = () => useContext(QueryRequestContext)\nexport {QueryRequestProvider, useQueryRequest}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\nimport {useQuery} from 'react-query'\nimport {\n  createResponseContext,\n  initialQueryResponse,\n  initialQueryState,\n  PaginationState,\n  QUERIES,\n  stringifyRequestQuery,\n  WithChildren,\n} from '../../../../../../_metronic/helpers'\nimport {getUsers} from './_requests'\nimport {User} from './_models'\nimport {useQueryRequest} from './QueryRequestProvider'\n\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\nconst QueryResponseProvider: FC<WithChildren> = ({children}) => {\n  const {state} = useQueryRequest()\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\n\n  useEffect(() => {\n    if (query !== updatedQuery) {\n      setQuery(updatedQuery)\n    }\n  }, [updatedQuery])\n\n  const {\n    isFetching,\n    refetch,\n    data: response,\n  } = useQuery(\n    `${QUERIES.USERS_LIST}-${query}`,\n    () => {\n      return getUsers(query)\n    },\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\n  )\n\n  return (\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\n      {children}\n    </QueryResponseContext.Provider>\n  )\n}\n\nconst useQueryResponse = () => useContext(QueryResponseContext)\n\nconst useQueryResponseData = () => {\n  const {response} = useQueryResponse()\n  if (!response) {\n    return []\n  }\n\n  return response?.data || []\n}\n\nconst useQueryResponsePagination = () => {\n  const defaultPaginationState: PaginationState = {\n    links: [],\n    ...initialQueryState,\n  }\n\n  const {response} = useQueryResponse()\n  if (!response || !response.payload || !response.payload.pagination) {\n    return defaultPaginationState\n  }\n\n  return response.payload.pagination\n}\n\nconst useQueryResponseLoading = (): boolean => {\n  const {isLoading} = useQueryResponse()\n  return isLoading\n}\n\nexport {\n  QueryResponseProvider,\n  useQueryResponse,\n  useQueryResponseData,\n  useQueryResponsePagination,\n  useQueryResponseLoading,\n}\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\nimport {\n  ID,\n  calculatedGroupingIsDisabled,\n  calculateIsAllDataSelected,\n  groupingOnSelect,\n  initialListView,\n  ListViewContextProps,\n  groupingOnSelectAll,\n  WithChildren,\n} from '../../../../../../_metronic/helpers'\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\n\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\n\nconst ListViewProvider: FC<WithChildren> = ({children}) => {\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\n  const {isLoading} = useQueryResponse()\n  const data = useQueryResponseData()\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\n\n  return (\n    <ListViewContext.Provider\n      value={{\n        selected,\n        itemIdForUpdate,\n        setItemIdForUpdate,\n        disabled,\n        isAllSelected,\n        onSelect: (id: ID) => {\n          groupingOnSelect(id, selected, setSelected)\n        },\n        onSelectAll: () => {\n          groupingOnSelectAll(isAllSelected, setSelected, data)\n        },\n        clearSelected: () => {\n          setSelected([])\n        },\n      }}\n    >\n      {children}\n    </ListViewContext.Provider>\n  )\n}\n\nconst useListView = () => useContext(ListViewContext)\n\nexport {ListViewProvider, useListView}\n","import {useEffect, useState} from 'react'\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\nimport {initialQueryState, KTSVG} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\n\nconst UsersListFilter = () => {\n  const {updateState} = useQueryRequest()\n  const {isLoading} = useQueryResponse()\n  const [role, setRole] = useState<string | undefined>()\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\n\n  useEffect(() => {\n    MenuComponent.reinitialization()\n  }, [])\n\n  const resetData = () => {\n    updateState({filter: undefined, ...initialQueryState})\n  }\n\n  const filterData = () => {\n    updateState({\n      filter: {role, last_login: lastLogin},\n      ...initialQueryState,\n    })\n  }\n\n  return (\n    <>\n      {/* begin::Filter Button */}\n      <button\n        disabled={isLoading}\n        type='button'\n        className='btn btn-light-primary me-3'\n        data-kt-menu-trigger='click'\n        data-kt-menu-placement='bottom-end'\n      >\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\n        Filter\n      </button>\n      {/* end::Filter Button */}\n      {/* begin::SubMenu */}\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\n        {/* begin::Header */}\n        <div className='px-7 py-5'>\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\n        </div>\n        {/* end::Header */}\n\n        {/* begin::Separator */}\n        <div className='separator border-gray-200'></div>\n        {/* end::Separator */}\n\n        {/* begin::Content */}\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\n          {/* begin::Input group */}\n          <div className='mb-10'>\n            <label className='form-label fs-6 fw-bold'>Role:</label>\n            <select\n              className='form-select form-select-solid fw-bolder'\n              data-kt-select2='true'\n              data-placeholder='Select option'\n              data-allow-clear='true'\n              data-kt-user-table-filter='role'\n              data-hide-search='true'\n              onChange={(e) => setRole(e.target.value)}\n              value={role}\n            >\n              <option value=''></option>\n              <option value='Administrator'>Administrator</option>\n              <option value='Analyst'>Analyst</option>\n              <option value='Developer'>Developer</option>\n              <option value='Support'>Support</option>\n              <option value='Trial'>Trial</option>\n            </select>\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='mb-10'>\n            <label className='form-label fs-6 fw-bold'>Last login:</label>\n            <select\n              className='form-select form-select-solid fw-bolder'\n              data-kt-select2='true'\n              data-placeholder='Select option'\n              data-allow-clear='true'\n              data-kt-user-table-filter='two-step'\n              data-hide-search='true'\n              onChange={(e) => setLastLogin(e.target.value)}\n              value={lastLogin}\n            >\n              <option value=''></option>\n              <option value='Yesterday'>Yesterday</option>\n              <option value='20 mins ago'>20 mins ago</option>\n              <option value='5 hours ago'>5 hours ago</option>\n              <option value='2 days ago'>2 days ago</option>\n            </select>\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Actions */}\n          <div className='d-flex justify-content-end'>\n            <button\n              type='button'\n              disabled={isLoading}\n              onClick={filterData}\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\n              data-kt-menu-dismiss='true'\n              data-kt-user-table-filter='reset'\n            >\n              Reset\n            </button>\n            <button\n              disabled={isLoading}\n              type='button'\n              onClick={resetData}\n              className='btn btn-primary fw-bold px-6'\n              data-kt-menu-dismiss='true'\n              data-kt-user-table-filter='filter'\n            >\n              Apply\n            </button>\n          </div>\n          {/* end::Actions */}\n        </div>\n        {/* end::Content */}\n      </div>\n      {/* end::SubMenu */}\n    </>\n  )\n}\n\nexport {UsersListFilter}\n","import {KTSVG} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {UsersListFilter} from './UsersListFilter'\n\nconst UsersListToolbar = () => {\n  const {setItemIdForUpdate} = useListView()\n  const openAddUserModal = () => {\n    setItemIdForUpdate(null)\n  }\n\n  return (\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\n      <UsersListFilter />\n\n      {/* begin::Export */}\n      <button type='button' className='btn btn-light-primary me-3'>\n        <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\n        Export\n      </button>\n      {/* end::Export */}\n\n      {/* begin::Add user */}\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\n        Add User\n      </button>\n      {/* end::Add user */}\n    </div>\n  )\n}\n\nexport {UsersListToolbar}\n","import {useQueryClient, useMutation} from 'react-query'\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\nimport {deleteSelectedUsers} from '../../core/_requests'\n\nconst UsersListGrouping = () => {\n  const {selected, clearSelected} = useListView()\n  const queryClient = useQueryClient()\n  const {query} = useQueryResponse()\n\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\n    // 💡 response of the mutation is passed to onSuccess\n    onSuccess: () => {\n      // ✅ update detail view directly\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\n      clearSelected()\n    },\n  })\n\n  return (\n    <div className='d-flex justify-content-end align-items-center'>\n      <div className='fw-bolder me-5'>\n        <span className='me-2'>{selected.length}</span> Selected\n      </div>\n\n      <button\n        type='button'\n        className='btn btn-danger'\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\n      >\n        Delete Selected\n      </button>\n    </div>\n  )\n}\n\nexport {UsersListGrouping}\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport {useState, useEffect} from 'react'\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\n\nconst UsersListSearchComponent = () => {\n  const {updateState} = useQueryRequest()\n  const [searchTerm, setSearchTerm] = useState<string>('')\n  // Debounce search term so that it only gives us latest value ...\n  // ... if searchTerm has not been updated within last 500ms.\n  // The goal is to only have the API call fire when user stops typing ...\n  // ... so that we aren't hitting our API rapidly.\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\n  // Effect for API call\n  useEffect(\n    () => {\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\n      }\n    },\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\n    // More details about useDebounce: https://usehooks.com/useDebounce/\n  )\n\n  return (\n    <div className='card-title'>\n      {/* begin::Search */}\n      <div className='d-flex align-items-center position-relative my-1'>\n        <KTSVG\n          path='/media/icons/duotune/general/gen021.svg'\n          className='svg-icon-1 position-absolute ms-6'\n        />\n        <input\n          type='text'\n          data-kt-user-table-filter='search'\n          className='form-control form-control-solid w-250px ps-14'\n          placeholder='Search user'\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n      </div>\n      {/* end::Search */}\n    </div>\n  )\n}\n\nexport {UsersListSearchComponent}\n","import {useListView} from '../../core/ListViewProvider'\nimport {UsersListToolbar} from './UserListToolbar'\nimport {UsersListGrouping} from './UsersListGrouping'\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\n\nconst UsersListHeader = () => {\n  const {selected} = useListView()\n  return (\n    <div className='card-header border-0 pt-6'>\n      <UsersListSearchComponent />\n      {/* begin::Card toolbar */}\n      <div className='card-toolbar'>\n        {/* begin::Group actions */}\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\n        {/* end::Group actions */}\n      </div>\n      {/* end::Card toolbar */}\n    </div>\n  )\n}\n\nexport {UsersListHeader}\n","// @ts-nocheck\nimport {FC} from 'react'\nimport {ColumnInstance} from 'react-table'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  column: ColumnInstance<User>\n}\n\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\n  <>\n    {column.Header && typeof column.Header === 'string' ? (\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n    ) : (\n      column.render('Header')\n    )}\n  </>\n)\n\nexport {CustomHeaderColumn}\n","// @ts-nocheck\nimport clsx from 'clsx'\nimport {FC} from 'react'\nimport {Row} from 'react-table'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  row: Row<User>\n}\n\nconst CustomRow: FC<Props> = ({row}) => (\n  <tr {...row.getRowProps()}>\n    {row.cells.map((cell) => {\n      return (\n        <td\n          {...cell.getCellProps()}\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\n        >\n          {cell.render('Cell')}\n        </td>\n      )\n    })}\n  </tr>\n)\n\nexport {CustomRow}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport clsx from 'clsx'\nimport {FC} from 'react'\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  user: User\n}\n\nconst UserInfoCell: FC<Props> = ({user}) => (\n  <div className='d-flex align-items-center'>\n    {/* begin:: Avatar */}\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\n      <a href='#'>\n        {user.avatar ? (\n          <div className='symbol-label'>\n            <img src={toAbsoluteUrl(`/media/${user.avatar}`)} alt={user.name} className='w-100' />\n          </div>\n        ) : (\n          <div\n            className={clsx(\n              'symbol-label fs-3',\n              `bg-light-${user.initials?.state}`,\n              `text-${user.initials?.state}`\n            )}\n          >\n            {user.initials?.label}\n          </div>\n        )}\n      </a>\n    </div>\n    <div className='d-flex flex-column'>\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\n        {user.name}\n      </a>\n      <span>{user.email}</span>\n    </div>\n  </div>\n)\n\nexport {UserInfoCell}\n","import {FC} from 'react'\n\ntype Props = {\n  last_login?: string\n}\n\nconst UserLastLoginCell: FC<Props> = ({last_login}) => (\n  <div className='badge badge-light fw-bolder'>{last_login}</div>\n)\n\nexport {UserLastLoginCell}\n","import {FC} from 'react'\n\ntype Props = {\n  two_steps?: boolean\n}\n\nconst UserTwoStepsCell: FC<Props> = ({two_steps}) => (\n  <> {two_steps && <div className='badge badge-light-success fw-bolder'>Enabled</div>}</>\n)\n\nexport {UserTwoStepsCell}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {FC, useEffect} from 'react'\nimport {useMutation, useQueryClient} from 'react-query'\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\nimport {ID, KTSVG, QUERIES} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\nimport {deleteUser} from '../../core/_requests'\n\ntype Props = {\n  id: ID\n}\n\nconst UserActionsCell: FC<Props> = ({id}) => {\n  const {setItemIdForUpdate} = useListView()\n  const {query} = useQueryResponse()\n  const queryClient = useQueryClient()\n\n  useEffect(() => {\n    MenuComponent.reinitialization()\n  }, [])\n\n  const openEditModal = () => {\n    setItemIdForUpdate(id)\n  }\n\n  const deleteItem = useMutation(() => deleteUser(id), {\n    // 💡 response of the mutation is passed to onSuccess\n    onSuccess: () => {\n      // ✅ update detail view directly\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\n    },\n  })\n\n  return (\n    <>\n      <a\n        href='#'\n        className='btn btn-light btn-active-light-primary btn-sm'\n        data-kt-menu-trigger='click'\n        data-kt-menu-placement='bottom-end'\n      >\n        Actions\n        <KTSVG path='/media/icons/duotune/arrows/arr072.svg' className='svg-icon-5 m-0' />\n      </a>\n      {/* begin::Menu */}\n      <div\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\n        data-kt-menu='true'\n      >\n        {/* begin::Menu item */}\n        <div className='menu-item px-3'>\n          <a className='menu-link px-3' onClick={openEditModal}>\n            Edit\n          </a>\n        </div>\n        {/* end::Menu item */}\n\n        {/* begin::Menu item */}\n        <div className='menu-item px-3'>\n          <a\n            className='menu-link px-3'\n            data-kt-users-table-filter='delete_row'\n            onClick={async () => await deleteItem.mutateAsync()}\n          >\n            Delete\n          </a>\n        </div>\n        {/* end::Menu item */}\n      </div>\n      {/* end::Menu */}\n    </>\n  )\n}\n\nexport {UserActionsCell}\n","import {FC, useMemo} from 'react'\nimport {ID} from '../../../../../../../_metronic/helpers'\nimport {useListView} from '../../core/ListViewProvider'\n\ntype Props = {\n  id: ID\n}\n\nconst UserSelectionCell: FC<Props> = ({id}) => {\n  const {selected, onSelect} = useListView()\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\n  return (\n    <div className='form-check form-check-custom form-check-solid'>\n      <input\n        className='form-check-input'\n        type='checkbox'\n        data-kt-check={isSelected}\n        data-kt-check-target='#kt_table_users .form-check-input'\n        checked={isSelected}\n        onChange={() => onSelect(id)}\n      />\n    </div>\n  )\n}\n\nexport {UserSelectionCell}\n","import clsx from 'clsx'\nimport {FC, PropsWithChildren, useMemo} from 'react'\nimport {HeaderProps} from 'react-table'\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  className?: string\n  title?: string\n  tableProps: PropsWithChildren<HeaderProps<User>>\n}\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\n  const id = tableProps.column.id\n  const {state, updateState} = useQueryRequest()\n\n  const isSelectedForSorting = useMemo(() => {\n    return state.sort && state.sort === id\n  }, [state, id])\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\n\n  const sortColumn = () => {\n    // avoid sorting for these columns\n    if (id === 'actions' || id === 'selection') {\n      return\n    }\n\n    if (!isSelectedForSorting) {\n      // enable sort asc\n      updateState({sort: id, order: 'asc', ...initialQueryState})\n      return\n    }\n\n    if (isSelectedForSorting && order !== undefined) {\n      if (order === 'asc') {\n        // enable sort desc\n        updateState({sort: id, order: 'desc', ...initialQueryState})\n        return\n      }\n\n      // disable sort\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\n    }\n  }\n\n  return (\n    <th\n      {...tableProps.column.getHeaderProps()}\n      className={clsx(\n        className,\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\n      )}\n      style={{cursor: 'pointer'}}\n      onClick={sortColumn}\n    >\n      {title}\n    </th>\n  )\n}\n\nexport {UserCustomHeader}\n","import {FC, PropsWithChildren} from 'react'\nimport {HeaderProps} from 'react-table'\nimport {useListView} from '../../core/ListViewProvider'\nimport {User} from '../../core/_models'\n\ntype Props = {\n  tableProps: PropsWithChildren<HeaderProps<User>>\n}\n\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\n  const {isAllSelected, onSelectAll} = useListView()\n  return (\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\n        <input\n          className='form-check-input'\n          type='checkbox'\n          data-kt-check={isAllSelected}\n          data-kt-check-target='#kt_table_users .form-check-input'\n          checked={isAllSelected}\n          onChange={onSelectAll}\n        />\n      </div>\n    </th>\n  )\n}\n\nexport {UserSelectionHeader}\n","// @ts-nocheck\nimport {Column} from 'react-table'\nimport {UserInfoCell} from './UserInfoCell'\nimport {UserLastLoginCell} from './UserLastLoginCell'\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\nimport {UserActionsCell} from './UserActionsCell'\nimport {UserSelectionCell} from './UserSelectionCell'\nimport {UserCustomHeader} from './UserCustomHeader'\nimport {UserSelectionHeader} from './UserSelectionHeader'\nimport {User} from '../../core/_models'\n\nconst usersColumns: ReadonlyArray<Column<User>> = [\n  {\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\n    id: 'selection',\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\n  },\n  {\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\n    id: 'name',\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\n  },\n  {\n    Header: (props) => <UserCustomHeader tableProps={props} title='Role' className='min-w-125px' />,\n    accessor: 'role',\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Last login' className='min-w-125px' />\n    ),\n    id: 'last_login',\n    Cell: ({...props}) => <UserLastLoginCell last_login={props.data[props.row.index].last_login} />,\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Two steps' className='min-w-125px' />\n    ),\n    id: 'two_steps',\n    Cell: ({...props}) => <UserTwoStepsCell two_steps={props.data[props.row.index].two_steps} />,\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Joined day' className='min-w-125px' />\n    ),\n    accessor: 'joined_day',\n  },\n  {\n    Header: (props) => (\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\n    ),\n    id: 'actions',\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\n  },\n]\n\nexport {usersColumns}\n","const UsersListLoading = () => {\n  const styles = {\n    borderRadius: '0.475rem',\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\n    backgroundColor: '#fff',\n    color: '#7e8299',\n    fontWeight: '500',\n    margin: '0',\n    width: 'auto',\n    padding: '1rem 2rem',\n    top: 'calc(50% - 2rem)',\n    left: 'calc(50% - 4rem)',\n  }\n\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\n}\n\nexport {UsersListLoading}\n","/* eslint-disable jsx-a11y/anchor-is-valid */\nimport clsx from 'clsx'\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\n\nconst mappedLabel = (label: string): string => {\n  if (label === '&laquo; Previous') {\n    return 'Previous'\n  }\n\n  if (label === 'Next &raquo;') {\n    return 'Next'\n  }\n\n  return label\n}\n\nconst UsersListPagination = () => {\n  const pagination = useQueryResponsePagination()\n  const isLoading = useQueryResponseLoading()\n  const {updateState} = useQueryRequest()\n  const updatePage = (page: number | null) => {\n    if (!page || isLoading || pagination.page === page) {\n      return\n    }\n\n    updateState({page, items_per_page: pagination.items_per_page || 10})\n  }\n\n  return (\n    <div className='row'>\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\n        <div id='kt_table_users_paginate'>\n          <ul className='pagination'>\n            {pagination.links\n              ?.map((link) => {\n                return {...link, label: mappedLabel(link.label)}\n              })\n              .map((link) => (\n                <li\n                  key={link.label}\n                  className={clsx('page-item', {\n                    active: pagination.page === link.page,\n                    disabled: isLoading,\n                    previous: link.label === 'Previous',\n                    next: link.label === 'Next',\n                  })}\n                >\n                  <a\n                    className={clsx('page-link', {\n                      'page-text': link.label === 'Previous' || link.label === 'Next',\n                      'me-5': link.label === 'Previous',\n                    })}\n                    onClick={() => updatePage(link.page)}\n                    style={{cursor: 'pointer'}}\n                  >\n                    {mappedLabel(link.label)}\n                  </a>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport {UsersListPagination}\n","import {useMemo} from 'react'\nimport {useTable, ColumnInstance, Row} from 'react-table'\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\nimport {CustomRow} from '../table/columns/CustomRow'\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\nimport {usersColumns} from './columns/_columns'\nimport {User} from '../core/_models'\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\n\nconst UsersTable = () => {\n  const users = useQueryResponseData()\n  const isLoading = useQueryResponseLoading()\n  const data = useMemo(() => users, [users])\n  const columns = useMemo(() => usersColumns, [])\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\n    columns,\n    data,\n  })\n\n  return (\n    <KTCardBody className='py-4'>\n      <div className='table-responsive'>\n        <table\n          id='kt_table_users'\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\n          {...getTableProps()}\n        >\n          <thead>\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\n              {headers.map((column: ColumnInstance<User>) => (\n                <CustomHeaderColumn key={column.id} column={column} />\n              ))}\n            </tr>\n          </thead>\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\n            {rows.length > 0 ? (\n              rows.map((row: Row<User>, i) => {\n                prepareRow(row)\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\n              })\n            ) : (\n              <tr>\n                <td colSpan={7}>\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\n                    No matching records found\n                  </div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      <UsersListPagination />\n      {isLoading && <UsersListLoading />}\n    </KTCardBody>\n  )\n}\n\nexport {UsersTable}\n","import {KTSVG} from '../../../../../../_metronic/helpers'\nimport {useListView} from '../core/ListViewProvider'\n\nconst UserEditModalHeader = () => {\n  const {setItemIdForUpdate} = useListView()\n\n  return (\n    <div className='modal-header'>\n      {/* begin::Modal title */}\n      <h2 className='fw-bolder'>Add User</h2>\n      {/* end::Modal title */}\n\n      {/* begin::Close */}\n      <div\n        className='btn btn-icon btn-sm btn-active-icon-primary'\n        data-kt-users-modal-action='close'\n        onClick={() => setItemIdForUpdate(undefined)}\n        style={{cursor: 'pointer'}}\n      >\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\n      </div>\n      {/* end::Close */}\n    </div>\n  )\n}\n\nexport {UserEditModalHeader}\n","import {ID, Response} from '../../../../../../_metronic/helpers'\nexport type User = {\n  id?: ID\n  name?: string\n  avatar?: string\n  email?: string\n  position?: string\n  role?: string\n  last_login?: string\n  two_steps?: boolean\n  joined_day?: string\n  online?: boolean\n  initials?: {\n    label: string\n    state: string\n  }\n}\n\nexport type UsersQueryResponse = Response<Array<User>>\n\nexport const initialUser: User = {\n  avatar: 'avatars/300-6.jpg',\n  position: 'Art Director',\n  role: 'Administrator',\n  name: '',\n  email: '',\n}\n","import {FC, useState} from 'react'\nimport * as Yup from 'yup'\nimport {useFormik} from 'formik'\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\nimport {initialUser, User} from '../core/_models'\nimport clsx from 'clsx'\nimport {useListView} from '../core/ListViewProvider'\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\nimport {createUser, updateUser} from '../core/_requests'\nimport {useQueryResponse} from '../core/QueryResponseProvider'\n\ntype Props = {\n  isUserLoading: boolean\n  user: User\n}\n\nconst editUserSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Wrong email format')\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Email is required'),\n  name: Yup.string()\n    .min(3, 'Minimum 3 symbols')\n    .max(50, 'Maximum 50 symbols')\n    .required('Name is required'),\n})\n\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\n  const {setItemIdForUpdate} = useListView()\n  const {refetch} = useQueryResponse()\n\n  const [userForEdit] = useState<User>({\n    ...user,\n    avatar: user.avatar || initialUser.avatar,\n    role: user.role || initialUser.role,\n    position: user.position || initialUser.position,\n    name: user.name || initialUser.name,\n    email: user.email || initialUser.email,\n  })\n\n  const cancel = (withRefresh?: boolean) => {\n    if (withRefresh) {\n      refetch()\n    }\n    setItemIdForUpdate(undefined)\n  }\n\n  const blankImg = toAbsoluteUrl('/media/svg/avatars/blank.svg')\n  const userAvatarImg = toAbsoluteUrl(`/media/${userForEdit.avatar}`)\n\n  const formik = useFormik({\n    initialValues: userForEdit,\n    validationSchema: editUserSchema,\n    onSubmit: async (values, {setSubmitting}) => {\n      setSubmitting(true)\n      try {\n        if (isNotEmpty(values.id)) {\n          await updateUser(values)\n        } else {\n          await createUser(values)\n        }\n      } catch (ex) {\n        console.error(ex)\n      } finally {\n        setSubmitting(true)\n        cancel(true)\n      }\n    },\n  })\n\n  return (\n    <>\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\n        {/* begin::Scroll */}\n        <div\n          className='d-flex flex-column scroll-y me-n7 pe-7'\n          id='kt_modal_add_user_scroll'\n          data-kt-scroll='true'\n          data-kt-scroll-activate='{default: false, lg: true}'\n          data-kt-scroll-max-height='auto'\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\n          data-kt-scroll-offset='300px'\n        >\n          {/* begin::Input group */}\n          <div className='fv-row mb-7'>\n            {/* begin::Label */}\n            <label className='d-block fw-bold fs-6 mb-5'>Avatar</label>\n            {/* end::Label */}\n\n            {/* begin::Image input */}\n            <div\n              className='image-input image-input-outline'\n              data-kt-image-input='true'\n              style={{backgroundImage: `url('${blankImg}')`}}\n            >\n              {/* begin::Preview existing avatar */}\n              <div\n                className='image-input-wrapper w-125px h-125px'\n                style={{backgroundImage: `url('${userAvatarImg}')`}}\n              ></div>\n              {/* end::Preview existing avatar */}\n\n              {/* begin::Label */}\n              {/* <label\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\n              data-kt-image-input-action='change'\n              data-bs-toggle='tooltip'\n              title='Change avatar'\n            >\n              <i className='bi bi-pencil-fill fs-7'></i>\n\n              <input type='file' name='avatar' accept='.png, .jpg, .jpeg' />\n              <input type='hidden' name='avatar_remove' />\n            </label> */}\n              {/* end::Label */}\n\n              {/* begin::Cancel */}\n              {/* <span\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\n              data-kt-image-input-action='cancel'\n              data-bs-toggle='tooltip'\n              title='Cancel avatar'\n            >\n              <i className='bi bi-x fs-2'></i>\n            </span> */}\n              {/* end::Cancel */}\n\n              {/* begin::Remove */}\n              {/* <span\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\n              data-kt-image-input-action='remove'\n              data-bs-toggle='tooltip'\n              title='Remove avatar'\n            >\n              <i className='bi bi-x fs-2'></i>\n            </span> */}\n              {/* end::Remove */}\n            </div>\n            {/* end::Image input */}\n\n            {/* begin::Hint */}\n            {/* <div className='form-text'>Allowed file types: png, jpg, jpeg.</div> */}\n            {/* end::Hint */}\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='fv-row mb-7'>\n            {/* begin::Label */}\n            <label className='required fw-bold fs-6 mb-2'>Full Name</label>\n            {/* end::Label */}\n\n            {/* begin::Input */}\n            <input\n              placeholder='Full name'\n              {...formik.getFieldProps('name')}\n              type='text'\n              name='name'\n              className={clsx(\n                'form-control form-control-solid mb-3 mb-lg-0',\n                {'is-invalid': formik.touched.name && formik.errors.name},\n                {\n                  'is-valid': formik.touched.name && !formik.errors.name,\n                }\n              )}\n              autoComplete='off'\n              disabled={formik.isSubmitting || isUserLoading}\n            />\n            {formik.touched.name && formik.errors.name && (\n              <div className='fv-plugins-message-container'>\n                <div className='fv-help-block'>\n                  <span role='alert'>{formik.errors.name}</span>\n                </div>\n              </div>\n            )}\n            {/* end::Input */}\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='fv-row mb-7'>\n            {/* begin::Label */}\n            <label className='required fw-bold fs-6 mb-2'>Email</label>\n            {/* end::Label */}\n\n            {/* begin::Input */}\n            <input\n              placeholder='Email'\n              {...formik.getFieldProps('email')}\n              className={clsx(\n                'form-control form-control-solid mb-3 mb-lg-0',\n                {'is-invalid': formik.touched.email && formik.errors.email},\n                {\n                  'is-valid': formik.touched.email && !formik.errors.email,\n                }\n              )}\n              type='email'\n              name='email'\n              autoComplete='off'\n              disabled={formik.isSubmitting || isUserLoading}\n            />\n            {/* end::Input */}\n            {formik.touched.email && formik.errors.email && (\n              <div className='fv-plugins-message-container'>\n                <span role='alert'>{formik.errors.email}</span>\n              </div>\n            )}\n          </div>\n          {/* end::Input group */}\n\n          {/* begin::Input group */}\n          <div className='mb-7'>\n            {/* begin::Label */}\n            <label className='required fw-bold fs-6 mb-5'>Role</label>\n            {/* end::Label */}\n            {/* begin::Roles */}\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Administrator'\n                  id='kt_modal_update_role_option_0'\n                  checked={formik.values.role === 'Administrator'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_0'>\n                  <div className='fw-bolder text-gray-800'>Administrator</div>\n                  <div className='text-gray-600'>\n                    Best for business owners and company administrators\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Developer'\n                  id='kt_modal_update_role_option_1'\n                  checked={formik.values.role === 'Developer'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_1'>\n                  <div className='fw-bolder text-gray-800'>Developer</div>\n                  <div className='text-gray-600'>\n                    Best for developers or people primarily using the API\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Analyst'\n                  id='kt_modal_update_role_option_2'\n                  checked={formik.values.role === 'Analyst'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_2'>\n                  <div className='fw-bolder text-gray-800'>Analyst</div>\n                  <div className='text-gray-600'>\n                    Best for people who need full access to analytics data, but don't need to update\n                    business settings\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  value='Support'\n                  id='kt_modal_update_role_option_3'\n                  checked={formik.values.role === 'Support'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_3'>\n                  <div className='fw-bolder text-gray-800'>Support</div>\n                  <div className='text-gray-600'>\n                    Best for employees who regularly refund payments and respond to disputes\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            <div className='separator separator-dashed my-5'></div>\n            {/* begin::Input row */}\n            <div className='d-flex fv-row'>\n              {/* begin::Radio */}\n              <div className='form-check form-check-custom form-check-solid'>\n                {/* begin::Input */}\n                <input\n                  className='form-check-input me-3'\n                  {...formik.getFieldProps('role')}\n                  name='role'\n                  type='radio'\n                  id='kt_modal_update_role_option_4'\n                  value='Trial'\n                  checked={formik.values.role === 'Trial'}\n                  disabled={formik.isSubmitting || isUserLoading}\n                />\n                {/* end::Input */}\n                {/* begin::Label */}\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_4'>\n                  <div className='fw-bolder text-gray-800'>Trial</div>\n                  <div className='text-gray-600'>\n                    Best for people who need to preview content data, but don't need to make any\n                    updates\n                  </div>\n                </label>\n                {/* end::Label */}\n              </div>\n              {/* end::Radio */}\n            </div>\n            {/* end::Input row */}\n            {/* end::Roles */}\n          </div>\n          {/* end::Input group */}\n        </div>\n        {/* end::Scroll */}\n\n        {/* begin::Actions */}\n        <div className='text-center pt-15'>\n          <button\n            type='reset'\n            onClick={() => cancel()}\n            className='btn btn-light me-3'\n            data-kt-users-modal-action='cancel'\n            disabled={formik.isSubmitting || isUserLoading}\n          >\n            Discard\n          </button>\n\n          <button\n            type='submit'\n            className='btn btn-primary'\n            data-kt-users-modal-action='submit'\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\n          >\n            <span className='indicator-label'>Submit</span>\n            {(formik.isSubmitting || isUserLoading) && (\n              <span className='indicator-progress'>\n                Please wait...{' '}\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\n              </span>\n            )}\n          </button>\n        </div>\n        {/* end::Actions */}\n      </form>\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\n    </>\n  )\n}\n\nexport {UserEditModalForm}\n","import {useQuery} from 'react-query'\nimport {UserEditModalForm} from './UserEditModalForm'\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\nimport {useListView} from '../core/ListViewProvider'\nimport {getUserById} from '../core/_requests'\n\nconst UserEditModalFormWrapper = () => {\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\n  const {\n    isLoading,\n    data: user,\n    error,\n  } = useQuery(\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\n    () => {\n      return getUserById(itemIdForUpdate)\n    },\n    {\n      cacheTime: 0,\n      enabled: enabledQuery,\n      onError: (err) => {\n        setItemIdForUpdate(undefined)\n        console.error(err)\n      },\n    }\n  )\n\n  if (!itemIdForUpdate) {\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\n  }\n\n  if (!isLoading && !error && user) {\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\n  }\n\n  return null\n}\n\nexport {UserEditModalFormWrapper}\n","import {useEffect} from 'react'\nimport {UserEditModalHeader} from './UserEditModalHeader'\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\n\nconst UserEditModal = () => {\n  useEffect(() => {\n    document.body.classList.add('modal-open')\n    return () => {\n      document.body.classList.remove('modal-open')\n    }\n  }, [])\n\n  return (\n    <>\n      <div\n        className='modal fade show d-block'\n        id='kt_modal_add_user'\n        role='dialog'\n        tabIndex={-1}\n        aria-modal='true'\n      >\n        {/* begin::Modal dialog */}\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\n          {/* begin::Modal content */}\n          <div className='modal-content'>\n            <UserEditModalHeader />\n            {/* begin::Modal body */}\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\n              <UserEditModalFormWrapper />\n            </div>\n            {/* end::Modal body */}\n          </div>\n          {/* end::Modal content */}\n        </div>\n        {/* end::Modal dialog */}\n      </div>\n      {/* begin::Modal Backdrop */}\n      <div className='modal-backdrop fade show'></div>\n      {/* end::Modal Backdrop */}\n    </>\n  )\n}\n\nexport {UserEditModal}\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\nimport {UsersListHeader} from './components/header/UsersListHeader'\nimport {UsersTable} from './table/UsersTable'\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\nimport {KTCard} from '../../../../../_metronic/helpers'\n\nconst UsersList = () => {\n  const {itemIdForUpdate} = useListView()\n  return (\n    <>\n      <KTCard>\n        <UsersListHeader />\n        <UsersTable />\n      </KTCard>\n      {itemIdForUpdate !== undefined && <UserEditModal />}\n    </>\n  )\n}\n\nconst UsersListWrapper = () => (\n  <QueryRequestProvider>\n    <QueryResponseProvider>\n      <ListViewProvider>\n        <UsersList />\n      </ListViewProvider>\n    </QueryResponseProvider>\n  </QueryRequestProvider>\n)\n\nexport {UsersListWrapper}\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\nimport {UsersListWrapper} from './users-list/UsersList'\n\nconst usersBreadcrumbs: Array<PageLink> = [\n  {\n    title: 'User Management',\n    path: '/apps/user-management/users',\n    isSeparator: false,\n    isActive: false,\n  },\n  {\n    title: '',\n    path: '',\n    isSeparator: true,\n    isActive: false,\n  },\n]\n\nconst UsersPage = () => {\n  return (\n    <Routes>\n      <Route element={<Outlet />}>\n        <Route\n          path='users'\n          element={\n            <>\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Users list</PageTitle>\n              <UsersListWrapper />\n            </>\n          }\n        />\n      </Route>\n      <Route index element={<Navigate to='/apps/user-management/users' />} />\n    </Routes>\n  )\n}\n\nexport default UsersPage\n"],"names":["API_URL","process","USER_URL","GET_USERS_URL","createUser","user","axios","then","response","data","updateUser","id","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","type","className","path","onChange","e","target","onClick","filter","last_login","initialQueryState","undefined","UsersListToolbar","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","deleteSelectedUsers","onSuccess","invalidateQueries","length","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","href","avatar","src","toAbsoluteUrl","alt","name","initials","label","email","UserLastLoginCell","UserTwoStepsCell","two_steps","UserActionsCell","deleteItem","userId","UserSelectionCell","isSelected","includes","checked","UserCustomHeader","title","tableProps","isSelectedForSorting","sort","order","style","cursor","UserSelectionHeader","usersColumns","props","Cell","index","accessor","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","mappedLabel","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","next","items_per_page","UsersTable","users","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","i","colSpan","UserEditModalHeader","initialUser","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","userForEdit","cancel","withRefresh","blankImg","userAvatarImg","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","isNotEmpty","console","error","handleSubmit","noValidate","backgroundImage","getFieldProps","touched","errors","autoComplete","isSubmitting","htmlFor","isValid","UserEditModalFormWrapper","enabledQuery","enabled","onError","err","UserEditModal","document","body","classList","add","remove","tabIndex","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","element","breadcrumbs","to"],"sourceRoot":""}